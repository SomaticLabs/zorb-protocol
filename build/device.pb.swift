// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: device.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

//*
// Defines a protocol buffer format that defines the layout and parameters
// of a Zorb device that can be accessed by the Design Studio.

/// Use v3 of the Protocol Buffer syntax

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// enumeration of different actuator types
public enum ActuatorType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case lra // = 0
  case lraWideband // = 1
  case piezo // = 2
  case haptuator // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .lra
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .lra
    case 1: self = .lraWideband
    case 2: self = .piezo
    case 3: self = .haptuator
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .lra: return 0
    case .lraWideband: return 1
    case .piezo: return 2
    case .haptuator: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ActuatorType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ActuatorType] = [
    .lra,
    .lraWideband,
    .piezo,
    .haptuator,
  ]
}

#endif  // swift(>=4.2)

///*
/// An actuator can vary in its type and output. This message type describes an
/// actuator and its capabilities.
public struct Actuator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var minimumFrequency: UInt32 = 0

  public var maximumFrequency: UInt32 = 0

  public var optimalFrequency: UInt32 = 0

  public var type: ActuatorType = .lra

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///*
/// A device has several configuration parameters that can be useful to a host that is sending
/// it instructions. This message type describes a Zorb device and its capabilities.
public struct Device {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hardwareVersion: UInt32 = 0

  public var bootloaderVersion: UInt32 = 0

  public var firmwareVersion: UInt32 = 0

  public var name: String = String()

  public var actuators: [Actuator] = []

  public var bluetoothID: String = String()

  public var usbID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ActuatorType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LRA"),
    1: .same(proto: "LRA_WIDEBAND"),
    2: .same(proto: "PIEZO"),
    3: .same(proto: "HAPTUATOR"),
  ]
}

extension Actuator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Actuator"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "minimum_frequency"),
    2: .standard(proto: "maximum_frequency"),
    3: .standard(proto: "optimal_frequency"),
    4: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.minimumFrequency)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.maximumFrequency)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.optimalFrequency)
      case 4: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minimumFrequency != 0 {
      try visitor.visitSingularUInt32Field(value: self.minimumFrequency, fieldNumber: 1)
    }
    if self.maximumFrequency != 0 {
      try visitor.visitSingularUInt32Field(value: self.maximumFrequency, fieldNumber: 2)
    }
    if self.optimalFrequency != 0 {
      try visitor.visitSingularUInt32Field(value: self.optimalFrequency, fieldNumber: 3)
    }
    if self.type != .lra {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Actuator, rhs: Actuator) -> Bool {
    if lhs.minimumFrequency != rhs.minimumFrequency {return false}
    if lhs.maximumFrequency != rhs.maximumFrequency {return false}
    if lhs.optimalFrequency != rhs.optimalFrequency {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Device: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Device"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hardware_version"),
    2: .standard(proto: "bootloader_version"),
    3: .standard(proto: "firmware_version"),
    4: .same(proto: "name"),
    5: .same(proto: "actuators"),
    6: .standard(proto: "bluetooth_id"),
    7: .standard(proto: "usb_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.hardwareVersion)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.bootloaderVersion)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.firmwareVersion)
      case 4: try decoder.decodeSingularStringField(value: &self.name)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.actuators)
      case 6: try decoder.decodeSingularStringField(value: &self.bluetoothID)
      case 7: try decoder.decodeSingularStringField(value: &self.usbID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hardwareVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.hardwareVersion, fieldNumber: 1)
    }
    if self.bootloaderVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.bootloaderVersion, fieldNumber: 2)
    }
    if self.firmwareVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.firmwareVersion, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if !self.actuators.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.actuators, fieldNumber: 5)
    }
    if !self.bluetoothID.isEmpty {
      try visitor.visitSingularStringField(value: self.bluetoothID, fieldNumber: 6)
    }
    if !self.usbID.isEmpty {
      try visitor.visitSingularStringField(value: self.usbID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Device, rhs: Device) -> Bool {
    if lhs.hardwareVersion != rhs.hardwareVersion {return false}
    if lhs.bootloaderVersion != rhs.bootloaderVersion {return false}
    if lhs.firmwareVersion != rhs.firmwareVersion {return false}
    if lhs.name != rhs.name {return false}
    if lhs.actuators != rhs.actuators {return false}
    if lhs.bluetoothID != rhs.bluetoothID {return false}
    if lhs.usbID != rhs.usbID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
