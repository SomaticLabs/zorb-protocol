/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6 at Tue Oct  2 13:22:09 2018. */

#ifndef PB_DEVICE_PB_H_INCLUDED
#define PB_DEVICE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ActuatorType {
    ActuatorType_LRA = 0,
    ActuatorType_LRA_WIDEBAND = 1,
    ActuatorType_PIEZO = 2,
    ActuatorType_HAPTUATOR = 3
} ActuatorType;
#define _ActuatorType_MIN ActuatorType_LRA
#define _ActuatorType_MAX ActuatorType_HAPTUATOR
#define _ActuatorType_ARRAYSIZE ((ActuatorType)(ActuatorType_HAPTUATOR+1))

/* Struct definitions */
typedef struct _Actuator {
    bool has_minimum_frequency;
    uint32_t minimum_frequency;
    bool has_maximum_frequency;
    uint32_t maximum_frequency;
    bool has_optimal_frequency;
    uint32_t optimal_frequency;
    bool has_type;
    ActuatorType type;
/* @@protoc_insertion_point(struct:Actuator) */
} Actuator;

typedef struct _Device {
    bool has_hardware_version;
    uint32_t hardware_version;
    bool has_bootloader_version;
    uint32_t bootloader_version;
    bool has_firmware_version;
    uint32_t firmware_version;
    pb_callback_t name;
    pb_callback_t actuators;
    pb_callback_t bluetooth_id;
    pb_callback_t usb_id;
/* @@protoc_insertion_point(struct:Device) */
} Device;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Actuator_init_default                    {false, 0, false, 0, false, 0, false, (ActuatorType)0}
#define Device_init_default                      {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Actuator_init_zero                       {false, 0, false, 0, false, 0, false, (ActuatorType)0}
#define Device_init_zero                         {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define Actuator_minimum_frequency_tag           1
#define Actuator_maximum_frequency_tag           2
#define Actuator_optimal_frequency_tag           3
#define Actuator_type_tag                        4
#define Device_hardware_version_tag              1
#define Device_bootloader_version_tag            2
#define Device_firmware_version_tag              3
#define Device_name_tag                          4
#define Device_actuators_tag                     5
#define Device_bluetooth_id_tag                  6
#define Device_usb_id_tag                        7

/* Struct field encoding specification for nanopb */
extern const pb_field_t Actuator_fields[5];
extern const pb_field_t Device_fields[8];

/* Maximum encoded size of messages (where known) */
#define Actuator_size                            20
/* Device_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define DEVICE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
